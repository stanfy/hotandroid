// This build script makes everything work well

import java.security.MessageDigest

def sampleTests = subprojects.collect { it.name } 


def buildDir = file('build')
def tmpDir = file("$buildDir/tmp")
tmpDir.mkdirs()
project.ext.buildDir = buildDir
project.ext.tmpDir = tmpDir
project.ext.cheater = false

def stampsFile = file("$buildDir/tests.stamp")

task makeTestStamps(type : MakeTestStamps) {

  inputDirs = sampleTests.collect { file("$it/src/instrumentTest") }
  inputDirs += file("build.gradle")
  inputDirs += file("settings.gradle")
  inputDirs += sampleTests.collect { file("$it/build.gradle") }
  inputDirs += sampleTests.collect { file("$it/settings.gradle") }
  resultFile = stampsFile

}

task addStampsToServer(dependsOn : 'makeTestStamps') << {
  ant.copy(todir : "../env/server/tools", file : stampsFile)
}

void download(def what, File where) {
  def out = new BufferedOutputStream(new FileOutputStream(where))
  out << new URL("http://stanfy-engine.appspot.com/tools/$what").openStream()
  out.close()
}

task checkTestStamp(dependsOn : 'makeTestStamps') << {
  def current = tasks['makeTestStamps'].resultFile.text
  def mustFile = new File(tmpDir, "must.stamp")
  download "tests.stamp", mustFile
  def must = mustFile.text
  project.ext.cheater = must != current
  println "Cheater: $project.cheater"
  if (project.cheater) {
    println "$must vs $current"
  }
}

def scoreTable = [
  "com.stanfy.hotcodeapp.test.MainActivityTest#testIntentFilter" : 2
]

def subChecks = subprojects.collect { ":$it.name:check" }
task checkAndRate(dependsOn : subChecks + 'checkTestStamp') << {
  if (project.cheater) {
    println "\t\t\t\t\tSorry cheater!"
    return
  }
  int score = 0
  
  // get score
  sampleTests.each {
    def reportsDir = new File("$it/build/instrumentTest-results/connected")
    reportsDir.eachFile {
      if (!it.name.endsWith(".xml")) { return }
      def testsInfo = new XmlParser().parse(it)
      score += testsInfo.testcase.inject(0) { int acc, def testcase ->
        if (testcase.children().size()) { return acc; }
        String key = testcase.'@classname' + '#' + testcase.'@name'
        scoreTable.containsKey(key) ? acc + scoreTable[key] : acc
      }
    }
  }

  println "Score: $score"

  def git = "git --no-pager log -1 --format=%at".execute()
  git.waitFor()
  def time = git.in.text.trim()
  def user = "$System.env.TRAVIS_REPO_SLUG".split("/")[0]

  if (!user) {
    println "Unknown user!"
    return
  }

  def uploaderFile = file("$tmpDir/uploader")
  download "upl-386", uploaderFile
  ant.chmod(file : uploaderFile, perm : "+x")
  def upl = "$uploaderFile.path -name=$user -rate=$score -time=$time".execute()
  upl.waitFor()
  println "Res: ${upl.exitValue()}, $upl.in.text, $upl.err.text"
}

class MakeTestStamps extends DefaultTask {

  List<File> inputDirs

  File resultFile

  private static String getHash(File f) {
      def messageDigest = MessageDigest.getInstance("SHA1")
      f.eachByte(1 << 20) { byte[] buf, int bytesRead ->
        messageDigest.update(buf, 0, bytesRead);
      }
      return new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0' )
  }

  @TaskAction
  void makeIt() {
    resultFile.delete()
    resultFile << inputDirs.inject("") {String stamp, File inF ->
      if (!inF.exists()) { return stamp }
      File f = null
      if (inF.directory) {
        inF.eachFileRecurse(groovy.io.FileType.FILES) {
          if (it.name.endsWith("java")) {
            stamp += MakeTestStamps.getHash(it)
          }
        }
      } else {
        stamp += MakeTestStamps.getHash(inF)
      }
      return stamp
    }
  }

}
